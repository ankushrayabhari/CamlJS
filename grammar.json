{
  "tokens": [
    {
      "name": "NotEqualFloat",
      "regex": "<>\\.",
      "tag": "infix"
    },
    {
      "name": "GreaterThanOrEqualFloat",
      "regex": ">=\\.",
      "tag": "infix"
    },
    {
      "name": "LessThanOrEqualFloat",
      "regex": "<=\\.",
      "tag": "infix"
    },
    {
      "name": "FunctionArrow",
      "regex": "->"
    },
    {
      "name": "NegationFloat",
      "regex": "~-\\.",
      "tag": "prefix"
    },
    {
      "name": "PlusFloat",
      "regex": "\\+\\.",
      "tag": "infix"
    },
    {
      "name": "MinusFloat",
      "regex": "-\\.",
      "tag": "infix"
    },
    {
      "name": "TimesFloat",
      "regex": "\\*\\.",
      "tag": "infix"
    },
    {
      "name": "DivideFloat",
      "regex": "/\\.",
      "tag": "infix"
    },
    {
      "name": "GreaterThanFloat",
      "regex": ">\\.",
      "tag": "infix"
    },
    {
      "name": "LessThanFloat",
      "regex": "<\\.",
      "tag": "infix"
    },
    {
      "name": "EqualFloat",
      "regex": "=\\.",
      "tag": "infix"
    },
    {
      "name": "NotEqual",
      "regex": "<>",
      "tag": "infix"
    },
    {
      "name": "GreaterThanOrEqual",
      "regex": ">=",
      "tag": "infix"
    },
    {
      "name": "LessThanOrEqual",
      "regex": "<=",
      "tag": "infix"
    },
    {
      "name": "Negation",
      "regex": "~-",
      "tag": "prefix"
    },
    {
      "name": "EmptyList",
      "regex": "\\[\\]"
    },
    {
      "name": "Cons",
      "regex": "::",
      "tag": "infix"
    },
    {
      "name": "Append",
      "regex": "@",
      "tag": "infix"
    },
    {
      "name": "StartList",
      "regex": "\\["
    },
    {
      "name": "EndList",
      "regex": "\\]"
    },
    {
      "name": "Plus",
      "regex": "\\+",
      "tag": "infix"
    },
    {
      "name": "Minus",
      "regex": "-",
      "tag": "infix"
    },
    {
      "name": "Times",
      "regex": "\\*",
      "tag": "infix"
    },
    {
      "name": "Divide",
      "regex": "/",
      "tag": "infix"
    },
    {
      "name": "GreaterThan",
      "regex": ">",
      "tag": "infix"
    },
    {
      "name": "LessThan",
      "regex": "<",
      "tag": "infix"
    },
    {
      "name": "Equal",
      "regex": "=",
      "tag": "infix"
    },
    {
      "name": "LParen",
      "regex": "("
    },
    {
      "name": "RParen",
      "regex": ")"
    },
    {
      "name": "SemiColon",
      "regex": ";"
    },
    {
      "name": "Period",
      "regex": "\\."
    },
    {
      "name": "If",
      "regex": "if"
    },
    {
      "name": "Then",
      "regex": "then"
    },
    {
      "name": "Else",
      "regex": "else"
    },
    {
      "name": "Fun",
      "regex": "fun"
    },
    {
      "name": "Let",
      "regex": "let"
    },
    {
      "name": "Rec",
      "regex": "rec"
    },
    {
      "name": "In",
      "regex": "in"
    },
    {
      "name": "Float",
      "parameter": "float",
      "regex": "[0-9]+\\.[0-9]*"
    },
    {
      "name": "Int",
      "parameter": "int",
      "regex": "[0-9]+"
    },
    {
      "name": "LowercaseIdent",
      "parameter": "string",
      "regex": "\\([a-z]\\|_\\)\\([A-Za-z0-9]\\|_\\|'\\)*"
    },
    {
      "name": "CapitalizedIdent",
      "parameter": "string",
      "regex": "\\([A-Z]\\)\\([A-Za-z0-9]\\|_\\|'\\)*"
    }
  ],
  "productions": {
    "Expr": [
      ["LetExpr"]
    ],
    "Pattern": [
      ["LowercaseIdent"]
    ],
    "LetBinding": [
      ["Pattern", "Equal", "LetExpr"],
      ["LowercaseIdent", "OneOrMorePattern", "Equal", "LetExpr"]
    ],
    "LetExpr": [
      ["Let", "LetBinding", "In", "LetExpr"],
      ["Let", "Rec", "LetBinding", "In", "LetExpr"],
      ["AnonFuncExpr"]
    ],
    "AnonFuncExpr": [
      ["Fun", "OneOrMorePattern", "FunctionArrow", "AnonFuncExpr"],
      ["SemiColonExpr"]
    ],
    "OneOrMorePattern": [
      ["OneOrMorePattern", "Pattern"],
      ["Pattern"]
    ],
    "SemiColonExpr": [
      ["IfExpr", "SemiColon", "SemiColonExpr"],
      ["IfExpr"]
    ],
    "IfExpr": [
      ["If", "IfExpr", "Then", "IfExpr", "Else", "IfExpr"],
      ["If", "IfExpr", "Then", "IfExpr"],
      ["ComparisonExpr"]
    ],
    "ComparisonExpr": [
      ["ComparisonExpr", "Equal", "AppendExpr"],
      ["ComparisonExpr", "LessThan", "AppendExpr"],
      ["ComparisonExpr", "GreaterThan", "AppendExpr"],
      ["ComparisonExpr", "LessThanOrEqual", "AppendExpr"],
      ["ComparisonExpr", "GreaterThanOrEqual", "AppendExpr"],
      ["ComparisonExpr", "NotEqual", "AppendExpr"],
      ["AppendExpr"]
    ],
    "AppendExpr": [
      ["ConsExpr", "Append", "AppendExpr"],
      ["ConsExpr"]
    ],
    "ConsExpr": [
      ["AddExpr", "Cons", "ConsExpr"],
      ["AddExpr"]
    ],
    "AddExpr": [
      ["AddExpr", "Plus", "TimesExpr"],
      ["AddExpr", "Minus", "TimesExpr"],
      ["TimesExpr"]
    ],
    "TimesExpr": [
      ["TimesExpr", "Times", "FunctionCallExpr"],
      ["TimesExpr", "Divide", "FunctionCallExpr"],
      ["FunctionCallExpr"]
    ],
    "FunctionCallExpr": [
      ["FunctionCallExpr", "PrefixExpr"],
      ["PrefixExpr"]
    ],
    "PrefixExpr": [
      ["Negation", "PrefixExpr"],
      ["ParenExpr"]
    ],
    "ParenExpr": [
      ["LParen", "Expr", "RParen"],
      ["StartList", "OneOrMoreIfExprWithSemicolon", "EndList"],
      ["StartList", "OneOrMoreIfExprWithSemicolon", "SemiColon", "EndList"],
      ["Constant"]
    ],
    "OneOrMoreIfExprWithSemicolon": [
      ["IfExpr"],
      ["OneOrMoreIfExprWithSemicolon", "SemiColon", "IfExpr"]
    ],
    "Constant": [
      ["Int"],
      ["LowercaseIdent"],
      ["CapitalizedIdent", "Period", "LowercaseIdent"],
      ["EmptyList"]
    ]
  }
}
