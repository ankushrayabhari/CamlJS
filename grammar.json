{
  "tokens": [
    {
      "name": "FunctionArrow",
      "regex": "->"
    },
    {
      "name": "NegationFloat",
      "regex": "~-\\.",
      "tag": "prefix"
    },
    {
      "name": "PlusFloat",
      "regex": "\\+\\.",
      "tag": "infix"
    },
    {
      "name": "MinusFloat",
      "regex": "-\\.",
      "tag": "infix"
    },
    {
      "name": "TimesFloat",
      "regex": "\\*\\.",
      "tag": "infix"
    },
    {
      "name": "DivideFloat",
      "regex": "/\\.",
      "tag": "infix"
    },
    {
      "name": "NotEqual",
      "regex": "<>",
      "tag": "infix"
    },
    {
      "name": "GreaterThanOrEqual",
      "regex": ">=",
      "tag": "infix"
    },
    {
      "name": "LessThanOrEqual",
      "regex": "<=",
      "tag": "infix"
    },
    {
      "name": "Negation",
      "regex": "~-",
      "tag": "prefix"
    },
    {
      "name": "EmptyList",
      "regex": "\\[\\]"
    },
    {
      "name": "EmptyArray",
      "regex": "\\[||\\]"
    },
    {
      "name": "Cons",
      "regex": "::",
      "tag": "infix"
    },
    {
      "name": "And",
      "regex": "&&",
      "tag": "infix"
    },
    {
      "name": "Or",
      "regex": "||",
      "tag": "infix"
    },
    {
      "name": "Comma",
      "regex": ","
    },
    {
      "name": "DoubleSemicolon",
      "regex": ";;"
    },
    {
      "name": "Append",
      "regex": "@",
      "tag": "infix"
    },
    {
      "name": "Concat",
      "regex": "\\^",
      "tag": "infix"
    },
    {
      "name": "StartList",
      "regex": "\\["
    },
    {
      "name": "EndList",
      "regex": "\\]"
    },
    {
      "name": "StartArray",
      "regex": "\\[|"
    },
    {
      "name": "EndArray",
      "regex": "|\\]"
    },
    {
      "name": "Plus",
      "regex": "\\+",
      "tag": "infix"
    },
    {
      "name": "Minus",
      "regex": "-",
      "tag": "infix"
    },
    {
      "name": "Times",
      "regex": "\\*",
      "tag": "infix"
    },
    {
      "name": "Divide",
      "regex": "/",
      "tag": "infix"
    },
    {
      "name": "GreaterThan",
      "regex": ">",
      "tag": "infix"
    },
    {
      "name": "LessThan",
      "regex": "<",
      "tag": "infix"
    },
    {
      "name": "Equal",
      "regex": "=",
      "tag": "infix"
    },
    {
      "name": "Unit",
      "regex": "()"
    },
    {
      "name": "LParen",
      "regex": "("
    },
    {
      "name": "RParen",
      "regex": ")"
    },
    {
      "name": "SemiColon",
      "regex": ";"
    },
    {
      "name": "Colon",
      "regex": ":"
    },
    {
      "name": "VerticalBar",
      "regex": "|"
    },
    {
      "name": "LCurlyBrace",
      "regex": "{"
    },
    {
      "name": "RCurlyBrace",
      "regex": "}"
    },
    {
      "name": "DoublePeriod",
      "regex": "\\.\\."
    },
    {
      "name": "Period",
      "regex": "\\."
    },
    {
      "name": "Ignore",
      "regex": "_"
    },
    {
      "name": "Match",
      "regex": "match"
    },
    {
      "name": "Function",
      "regex": "function"
    },
    {
      "name": "With",
      "regex": "with"
    },
    {
      "name": "When",
      "regex": "when"
    },
    {
      "name": "Open",
      "regex": "open"
    },
    {
      "name": "If",
      "regex": "if"
    },
    {
      "name": "As",
      "regex": "as"
    },
    {
      "name": "Then",
      "regex": "then"
    },
    {
      "name": "Else",
      "regex": "else"
    },
    {
      "name": "Fun",
      "regex": "fun"
    },
    {
      "name": "Let",
      "regex": "let"
    },
    {
      "name": "Rec",
      "regex": "rec"
    },
    {
      "name": "In",
      "regex": "in"
    },
    {
      "name": "Type",
      "regex": "type"
    },
    {
      "name": "Of",
      "regex": "of"
    },
    {
      "name": "Bool",
      "parameter": "bool",
      "regex": "true\\|false"
    },
    {
      "name": "Float",
      "parameter": "float",
      "regex": "[0-9]+\\.[0-9]*"
    },
    {
      "name": "Int",
      "parameter": "int",
      "regex": "[0-9]+"
    },
    {
      "name": "CharLiteral",
      "parameter": "string",
      "regex": "'\\(\\\\.\\|[^\"\n\\'\t\r\b]\\)'"
    },
    {
      "name": "StringLiteral",
      "parameter": "string",
      "regex": "\"\\(\\\\.\\|[^\"\n]\\)*\""
    },
    {
      "name": "LowercaseIdent",
      "parameter": "string",
      "regex": "[a-z]\\([A-Za-z0-9]\\|_\\|'\\)*"
    },
    {
      "name": "CapitalizedIdent",
      "parameter": "string",
      "regex": "\\([A-Z]\\)\\([A-Za-z0-9]\\|_\\|'\\)*"
    }
  ],
  "productions": {
    "ModuleItems": [
      ["DoubleSemicolon", "ExprDefinitionNotStartingWithDoubleSemicolon"],
      ["ExprDefinitionNotStartingWithDoubleSemicolon"]
    ],
    "ExprDefinitionNotStartingWithDoubleSemicolon": [
      ["Expr"],
      ["Definition"],
      ["Expr", "OneOrMoreDefinitionOrExpr"],
      ["Definition", "OneOrMoreDefinitionOrExpr"]
    ],
    "OneOrMoreDefinitionOrExpr": [
      ["DoubleSemicolon", "Definition", "OneOrMoreDefinitionOrExpr"],
      ["DoubleSemicolon", "Expr", "OneOrMoreDefinitionOrExpr"],
      ["DoubleSemicolon", "Definition"],
      ["DoubleSemicolon", "Expr"],
      ["Definition", "OneOrMoreDefinitionOrExpr"],
      ["Definition"],
      ["DoubleSemicolon"]
    ],
    "Expr": [
      ["LetAnonFuncMatchExpr"]
    ],
    "Definition": [
      ["Let", "LetBinding"],
      ["Let", "Rec", "LetBinding"],
      ["Open", "ModulePath"],
      ["Type", "LowercaseIdent", "Equal", "TypeRepresentation"]
    ],
    "Pattern": [
      ["AsPattern"]
    ],
    "AsPattern": [
      ["TuplePattern", "As", "LowercaseIdent"],
      ["TuplePattern"]
    ],
    "TuplePattern": [
      ["ConsPattern", "Comma", "TuplePattern"],
      ["ConsPattern"]
    ],
    "ConsPattern": [
      ["ConstructorPattern", "Cons", "ConsPattern"],
      ["ConstructorPattern"]
    ],
    "ConstructorPattern": [
      ["CapitalizedIdent"],
      ["CapitalizedIdent", "ParenPattern"],
      ["ParenPattern"]
    ],
    "OneOrMoreSemicolonSeparatedFieldPattern": [
      ["FieldPattern"],
      ["OneOrMoreSemicolonSeparatedFieldPattern", "SemiColon", "FieldPattern"]
    ],
    "FieldPattern": [
      ["LowercaseIdent", "Equal", "Pattern"]
    ],
    "ParenPattern": [
      ["LParen", "Pattern", "RParen"],
      ["StartList", "OneOrMorePatternWithSemicolon", "EndList"],
      ["StartList", "OneOrMorePatternWithSemicolon", "SemiColon", "EndList"],
      ["StartArray", "OneOrMorePatternWithSemicolon", "EndArray"],
      ["StartArray", "OneOrMorePatternWithSemicolon", "SemiColon", "EndArray"],
      ["LCurlyBrace", "OneOrMoreSemicolonSeparatedFieldPattern", "RCurlyBrace"],
      ["LCurlyBrace", "OneOrMoreSemicolonSeparatedFieldPattern", "SemiColon", "RCurlyBrace"],
      ["CharLiteral", "DoublePeriod", "CharLiteral"],
      ["LowercaseIdent"],
      ["Constant"],
      ["Ignore"]
    ],
    "OneOrMorePatternWithSemicolon": [
      ["Pattern"],
      ["OneOrMorePatternWithSemicolon", "SemiColon", "Pattern"]
    ],
    "LetBinding": [
      ["Pattern", "Equal", "LetAnonFuncMatchExpr"],
      ["LowercaseIdent", "OneOrMorePattern", "Equal", "LetAnonFuncMatchExpr"]
    ],
    "OneOrMoreSemicolonSeparatedField-Decl": [
      ["Field-Decl"],
      ["OneOrMoreSemicolonSeparatedField-Decl", "SemiColon", "Field-Decl"]
    ],
    "Field-Decl": [
      ["LowercaseIdent", "Colon", "TypExpr"]
    ],
    "LetAnonFuncMatchExpr": [
      ["Let", "LetBinding", "In", "LetAnonFuncMatchExpr"],
      ["Let", "Rec", "LetBinding", "In", "LetAnonFuncMatchExpr"],
      ["Fun", "OneOrMorePattern", "FunctionArrow", "LetAnonFuncMatchExpr"],
      ["Match", "LetAnonFuncMatchExpr", "With", "PatternMatching"],
      ["Function", "PatternMatching"],
      ["SemiColonExpr"]
    ],
    "PatternMatching": [
      ["Pattern", "FunctionArrow", "LetAnonFuncMatchExpr"],
      ["Pattern", "FunctionArrow", "LetAnonFuncMatchExpr", "OneOrMorePatternMatchesWithVerticalBar"],
      ["Pattern", "When", "Expr", "FunctionArrow", "LetAnonFuncMatchExpr"],
      ["OneOrMorePatternMatchesWithVerticalBar"]
    ],
    "OneOrMorePatternMatchesWithVerticalBar": [
      ["VerticalBar", "Pattern", "FunctionArrow", "LetAnonFuncMatchExpr", "OneOrMorePatternMatchesWithVerticalBar"],
      ["VerticalBar", "Pattern", "FunctionArrow", "LetAnonFuncMatchExpr"]
    ],
    "OneOrMorePattern": [
      ["OneOrMorePattern", "Pattern"],
      ["Pattern"]
    ],
    "TypeRepresentation": [
      ["LCurlyBrace", "OneOrMoreSemicolonSeparatedField-Decl", "RCurlyBrace"],
      ["LCurlyBrace", "OneOrMoreSemicolonSeparatedField-Decl", "SemiColon", "RCurlyBrace"],
      ["ConstrDecl", "OneOrMoreConstrDeclWithVerticalBar"],
      ["OneOrMoreConstrDeclWithVerticalBar"],
      ["ConstrDecl"]
    ],
    "OneOrMoreConstrDeclWithVerticalBar": [
      ["VerticalBar", "ConstrDecl", "OneOrMoreConstrDeclWithVerticalBar"],
      ["VerticalBar", "ConstrDecl"]
    ],
    "ConstrDecl": [
      ["CapitalizedIdent"],
      ["CapitalizedIdent", "Of", "TypExpr"]
    ],
    "TypExpr": [
      ["ParenTypExpr", "Times", "TypExpr"],
      ["ParenTypExpr"]
    ],
    "ParenTypExpr": [
      ["LParen", "TypExpr", "RParen"],
      ["LowercaseIdent"]
    ],
    "SemiColonExpr": [
      ["IfExpr", "SemiColon", "SemiColonExpr"],
      ["IfExpr"]
    ],
    "IfExpr": [
      ["If", "IfExpr", "Then", "IfExpr", "Else", "IfExpr"],
      ["If", "IfExpr", "Then", "IfExpr"],
      ["TupleExpr"]
    ],
    "TupleExpr": [
      ["TupleExpr", "Comma", "OrExpr"],
      ["OrExpr"]
    ],
    "OrExpr": [
      ["AndExpr", "Or", "OrExpr"],
      ["AndExpr"]
    ],
    "AndExpr": [
      ["ComparisonExpr", "And", "AndExpr"],
      ["ComparisonExpr"]
    ],
    "ComparisonExpr": [
      ["ComparisonExpr", "Equal", "AppendExpr"],
      ["ComparisonExpr", "LessThan", "AppendExpr"],
      ["ComparisonExpr", "GreaterThan", "AppendExpr"],
      ["ComparisonExpr", "LessThanOrEqual", "AppendExpr"],
      ["ComparisonExpr", "GreaterThanOrEqual", "AppendExpr"],
      ["ComparisonExpr", "NotEqual", "AppendExpr"],
      ["AppendExpr"]
    ],
    "AppendExpr": [
      ["ConsExpr", "Append", "AppendExpr"],
      ["ConsExpr", "Concat", "AppendExpr"],
      ["ConsExpr"]
    ],
    "ConsExpr": [
      ["AddExpr", "Cons", "ConsExpr"],
      ["AddExpr"]
    ],
    "AddExpr": [
      ["AddExpr", "Plus", "TimesExpr"],
      ["AddExpr", "PlusFloat", "TimesExpr"],
      ["AddExpr", "Minus", "TimesExpr"],
      ["AddExpr", "MinusFloat", "TimesExpr"],
      ["TimesExpr"]
    ],
    "TimesExpr": [
      ["TimesExpr", "Times", "FunctionCallExpr"],
      ["TimesExpr", "TimesFloat", "FunctionCallExpr"],
      ["TimesExpr", "Divide", "FunctionCallExpr"],
      ["TimesExpr", "DivideFloat", "FunctionCallExpr"],
      ["FunctionCallExpr"]
    ],
    "FunctionCallExpr": [
      ["FunctionCallExpr", "PrefixExpr"],
      ["PrefixExpr"],
      ["CapitalizedIdent"],
      ["CapitalizedIdent", "PrefixExpr"]
    ],
    "PrefixExpr": [
      ["Negation", "PrefixExpr"],
      ["NegationFloat", "PrefixExpr"],
      ["DotAccessorExpr"]
    ],
    "DotAccessorExpr": [
      ["ModulePath", "Period", "LowercaseIdent"],
      ["ParenExpr", "Period", "LowercaseIdent"],
      ["ParenExpr"]
    ],
    "ParenExpr": [
      ["LParen", "Expr", "RParen"],
      ["StartList", "OneOrMoreIfExprWithSemicolon", "EndList"],
      ["StartList", "OneOrMoreIfExprWithSemicolon", "SemiColon", "EndList"],
      ["StartArray", "OneOrMoreIfExprWithSemicolon", "EndArray"],
      ["StartArray", "OneOrMoreIfExprWithSemicolon", "SemiColon", "EndArray"],
      ["LowercaseIdent"],
      ["LCurlyBrace", "OneOrMoreSemicolonSeparatedFieldBinding", "RCurlyBrace"],
      ["LCurlyBrace", "OneOrMoreSemicolonSeparatedFieldBinding", "SemiColon", "RCurlyBrace"],
      ["Constant"]
    ],
    "OneOrMoreSemicolonSeparatedFieldBinding": [
      ["FieldBinding"],
      ["OneOrMoreSemicolonSeparatedFieldBinding", "SemiColon", "FieldBinding"]
    ],
    "FieldBinding": [
      ["LowercaseIdent", "Equal", "IfExpr"]
    ],
    "OneOrMoreIfExprWithSemicolon": [
      ["IfExpr"],
      ["OneOrMoreIfExprWithSemicolon", "SemiColon", "IfExpr"]
    ],
    "ModulePath": [
      ["CapitalizedIdent"]
    ],
    "Constant": [
      ["Unit"],
      ["Int"],
      ["Bool"],
      ["Float"],
      ["CharLiteral"],
      ["StringLiteral"],
      ["EmptyList"],
      ["EmptyArray"]
    ]
  }
}
